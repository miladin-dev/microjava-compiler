package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	boolean unrecoveredError = false;
	
	Logger log = Logger.getLogger(getClass());
   
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		unrecoveredError = true;
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
			Symbol errorSymbol = (Symbol) info;
            msg.append(" na liniji ").append(errorSymbol.left);
			msg.append(", koloni ").append(errorSymbol.right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(errorSymbol.value.toString()).append("\"");
			}			
			msg.append("!");
		}
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
			Symbol errorSymbol = (Symbol) info;
            msg.append(" na liniji ").append(errorSymbol.left);
			msg.append(", koloni ").append(errorSymbol.right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(errorSymbol.value.toString()).append("\"");
			}			
			msg.append("!");
		}
        log.error(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* Operators */
terminal EQ, PLUSPLUS, MINUSMINUS, OROR, ANDAND, EQEQ, DIFF, GR, GRE, LS, LSE, MINUS, PLUS, MUL, DIV, MOD;
terminal LSQRB, RSQRB, LBRACK, RBRACK, LCURLY, RCURLY;
nonterminal OptionalArrayOp;

/* Global names */
terminal SEMI, CONST, COMMA, VOID, COLON, DOT, RECORD;
nonterminal LiteralConst, RecordName;

/* Program */
terminal PROG;
terminal String IDENT ;
terminal Integer NUMCONST;
terminal String CHARCONST;
terminal Boolean BOOLCONST;


/* Variables Declaration */
nonterminal VarIdentDeclList, RecordDecl;
nonterminal ConstDecl, ProgramDecl, VarDecl, VarIdentDecl, ClassDecl, ClassName;

/* Const Declaration */
nonterminal ConstAssignList;
nonterminal ConstAssign;

/* Method Declaration */
nonterminal Extends, ClassBody, FormPars, ReturnType, FormParamList, FormParameter, VarDeclList, MethodDecl;
nonterminal Statement, MethodDeclList, Statements, Label, ConstructorList, KeywordElse;


/* Statement */
nonterminal SingleStatement, MultipleStatements, MatchedIfStatement, KeywordIf, KeywordWhile;
nonterminal DesignatorStatement;
nonterminal ActPars, ExprList, KeywordDo;
nonterminal Addop, RelOp, MulOp, OptMinus, Assignop;

/* KEYWORDS */
terminal KEYWORD_IF, KEYWORD_ELSE, KEYWORD_DO, KEYWORD_WHILE, KEYWORD_BREAK, KEYWORD_CONTINUE;
terminal KEYWORD_RETURN, KEYWORD_READ, KEYWORD_PRINT, KEYWORD_GOTO, KEYWORD_NEW, KEYWORD_CLASS, KEYWORD_EXTENDS;

nonterminal rs.etf.pp1.symboltable.concepts.Obj  MethodName, Designator, Program, ProgName, DesignIdent;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, ConditionIf, CondFact, CondTerm, Term, Factor, Expr, Type, NumberConst, CharConst, BoolConst;

precedence left KEYWORD_ELSE;



Program ::= (Program) PROG ProgName:p ProgramDecl LCURLY MethodDeclList RCURLY;

ProgName ::= (ProgName) IDENT:progName;

Type ::= (Type) IDENT:typeName
		; 

//class type
// String typeName;
// getTypeName() { return typeName; }

ProgramDecl ::= (ConstProgramDecl) ProgramDecl ConstDecl
				| 
				(VarProgramDecl) ProgramDecl VarDecl
				|
				(ClassProgramDecl) ProgramDecl ClassDecl
				|
				(RecordProgramDecl) ProgramDecl RecordDecl
				|
				(Tralal) 
				;
				
				
/* ConstProgramDeclaration */


ConstDecl ::=  (ConstDeclarations) CONST Type ConstAssignList SEMI
			  |
			   (ConstDeclrsError) CONST error SEMI:err {: parser.report_error("Syntax error recovery const declaration on line " + errleft, null); :}
				;

ConstAssignList ::= (ConstAssignments) ConstAssignList COMMA ConstAssign
					|
					(ConstAssignment) ConstAssign
					;

ConstAssign ::= (ConstAssign) IDENT:constName EQ LiteralConst
				;

LiteralConst ::= (NumCnst) NumberConst
				|
				(CharCnst) CharConst
				|
				(BoolCnst) BoolConst
				;

NumberConst ::= (NumberConst) NUMCONST:num;
CharConst ::= (CharConst) CHARCONST:ch;
BoolConst ::= (BoolConst) BOOLCONST:bol;

/*	VarProgramDeclaration  */	
			
			
VarDecl ::= (VarDecl) Type:varType VarIdentDeclList SEMI
			;


VarIdentDeclList ::= (VarIdentDeclarations) VarIdentDeclList COMMA VarIdentDecl
					|
					 (VarIdDecl) VarIdentDecl
					;
			
VarIdentDecl ::= (VarIdentDecl) IDENT:varName OptionalArrayOp 
				;
			
OptionalArrayOp ::= (ArrOp) LSQRB RSQRB
					|
					(NoArrayOp)
					;
					
/* Record Declaration */

RecordDecl ::= (RecordDecl) RECORD RecordName LCURLY VarDeclList RCURLY;
			   
RecordName ::= (RecordName) IDENT:recordName;

/*	Class Declaration  */	
			
				
ClassDecl ::= (ClassDecl) KEYWORD_CLASS ClassName Extends LCURLY VarDeclList ClassBody RCURLY 
				;
				
ClassName ::= (ClassName) IDENT:className;

Extends ::= (Extnd) KEYWORD_EXTENDS Type
			|
			(NoExtends)
			;
			
ClassBody ::= (ClassBdy) LCURLY MethodDeclList RCURLY
				|
			  (ClassBdyConst) LCURLY ConstructorList MethodDeclList RCURLY
  				|
			  (NoClassBody) /* epsilon */
				;
	
ConstructorList ::= (Constr) IDENT LBRACK RBRACK VarDeclList LCURLY MultipleStatements RCURLY
					;
					

/* Method Declaration  */	


MethodDeclList ::= (MultipleMethods) MethodDeclList MethodDecl
					|
				   (SingleMethod) MethodDecl /* epsilon */
					;
				
MethodDecl ::=  (MethodDecl) ReturnType MethodName LBRACK FormPars RBRACK VarDeclList LCURLY MultipleStatements RCURLY
			   ;

MethodName ::= (MethodName) IDENT:methName;


ReturnType ::= (RetType) Type
		  	   |
			   (RetVoid) VOID
			   ;	
			   
FormPars ::= (FormParams) FormParamList
			|
			(NoFormPars) /* epsilon */
			;

FormParamList ::= (FormParameters) FormParamList COMMA FormParameter
				| 
				(FormParam) FormParameter
				;
				
FormParameter ::= (SingleFormParam) Type IDENT:paramName OptionalArrayOp 
				|
				  (SingleFormParamError) error:err {: parser.report_error("Syntax error recovery for Method Parameters on line " + errleft, null); :}
				;
			

VarDeclList ::= (MultipleVarDeclarations) VarDeclList VarDecl
				|
				(SingleVarDeclaration)
				;
				

/* Statements */
				
				
MultipleStatements ::= (MultipleStmts) MultipleStatements Statement 
					   |
					   (NoSmtt) 
					   ;
					   
   
				
Statement ::= (OneStmtLbl) Label COLON SingleStatement
			  |
			  (OneStmt) SingleStatement
			  |
			  (StmtsBracket) Statements
			  ;

Statements ::= (Statements) LCURLY MultipleStatements RCURLY;

Label ::= (Label) IDENT;

SingleStatement ::= (StmtDesignator) DesignatorStatement SEMI
					|
					(StmIfNoBrace) KeywordIf LBRACK ConditionIf RBRACK Statement
					|
					(MatchedIfStmt) MatchedIfStatement
					|
					(StmtDoWhile) KeywordDo Statement KeywordWhile LBRACK Condition RBRACK SEMI
					|
					(StmtBreak) KEYWORD_BREAK SEMI
					|
					(StmtContinue) KEYWORD_CONTINUE SEMI
					|
					(StmtReturn) KEYWORD_RETURN SEMI
					|
					(StmtRetExpr) KEYWORD_RETURN Expr SEMI
					|
					(StmtRead) KEYWORD_READ LBRACK Designator RBRACK SEMI
					|
					(StmtPrint) KEYWORD_PRINT LBRACK Expr RBRACK SEMI
					|
					(StmtPrintConst) KEYWORD_PRINT LBRACK Expr COMMA NUMCONST RBRACK SEMI
					|
					(StmtGoto) KEYWORD_GOTO IDENT SEMI	
					;
			
			
MatchedIfStatement ::= (MtchIfStmtBrackets) KeywordIf LBRACK ConditionIf RBRACK Statement KeywordElse Statement
					   ;
					   
					   
KeywordDo ::= (KeywordDo) KEYWORD_DO;

KeywordElse ::= (KeywordElse) KEYWORD_ELSE;

KeywordIf ::= (KeywordIf) KEYWORD_IF;

KeywordWhile ::= (KeywordWhile) KEYWORD_WHILE;
   
ConditionIf ::= (CondIf) Condition 
				| 
				(CondIfErr) error:err {: parser.report_info("Syntax error for 'IF CONDITION' on line " + errleft, null); :}
				;
/* Designator */
				
				
DesignatorStatement ::= (DesStmtEq) Designator Assignop Expr
						|
						(DesStmtEqErr) error:err {: parser.report_info("Syntax error recovery for '=' on line " + errleft, null); :}
						|
						(DesStmtFnAct) Designator LBRACK ActPars RBRACK 
						|
						(DesStmtFn) Designator LBRACK RBRACK
						|
						(DesStmtPLL) Designator PLUSPLUS
						|
						(DesStmtMINN) Designator MINUSMINUS
						;
// this.x[3];
// this.x.b[5];

//a.x;
Designator ::= (DesignDot) DesignIdent DOT IDENT:desTip
			   |
			   (DesignDotArray) DesignIdent DOT IDENT:desTip LSQRB Expr RSQRB
			   |
			   (DesignArrayIndex) IDENT:arrName LSQRB Expr:expr RSQRB
			   |
		   	   (DelegDesign) IDENT:idName
			   ;

DesignIdent ::= (DesignIdent) IDENT:className;
/* Expr, Factor, Term, ActPars */
				
				
Expr ::= (SingleExpr) OptMinus Term
		|
		(MultipleExpr) Expr Addop Term
		;

//fn(1, meth(2,3)) 

ActPars ::= (MultipleExpressions) ActPars COMMA Expr
			|
		 	(SingleExpression) Expr
			;
			

		
				
Term ::= (SingleTerm) Factor 
		|
		(MultipleTerm) Term MulOp Factor
		;
		
		
Factor ::= 	(FactorDes) Designator
			|
			(FactorFn) Designator LBRACK RBRACK
			|
			(FactorFnAct) Designator LBRACK ActPars RBRACK
			|
			(FactorNum) NUMCONST
			|
			(FactorChar) CHARCONST
			|
			(FactorBool) BOOLCONST
			|
			(FactorNew) KEYWORD_NEW Type
			|
			(FactorNewExpr) KEYWORD_NEW Type LSQRB Expr RSQRB
			|
			(FactorExpr) LBRACK Expr RBRACK
			;


/* Conditions */


Condition ::= (SingleCond) CondTerm 
			  |
			  (MultipleCond) Condition OROR CondTerm
			;
				
				
CondTerm ::= (SingleCondTerm) CondFact 
			|
			(MultipleCondTerm) CondTerm ANDAND CondFact
			;
				

CondFact ::= (CondExpr) Expr
			|
			 (CondRelOp) Expr RelOp Expr
			;


/* Operations */

Assignop ::= (Assignop) EQ;

RelOp ::= (Equalss) EQEQ
		  |
		  (Different) DIFF
		  |
		  (Greater) GR
		  |
		  (GreaterEq) GRE
		  |
		  (Lesser) LS
		  |
		  (LesserEq) LSE
		  ;
		  

MulOp ::= (MulAsteriks) MUL
		  |
		  (MulDiv) DIV
		  |
		  (MulMod) MOD
		  ;
		 
 Addop ::= (AddopPlus) PLUS
 		   |
 		   (AddopMinus) MINUS
 		   ;
 		   
OptMinus ::= (OptMin) MINUS
			|
			(NoMinusSign)
			; 
				






